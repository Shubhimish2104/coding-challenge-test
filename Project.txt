1)Extract Year, Month, and Day from the Created Date.


SELECT *,
       extract(YEAR
               FROM inc_sys_created_on) AS extracted_year,
       extract(MONTH
               FROM inc_sys_created_on) AS extracted_month,
       extract(DAY
               FROM inc_sys_created_on) AS extracted_date
FROM  public.project_sample;

-----------------------------------------------------------------------------------------------------------------------
2)Calculate the average resolution time per Category and Priority.

SELECT 
        inc_category,
        inc_priority,
        AVG(extract(epoch from (inc_resolved_at - inc_sys_created_on))) / 3600 AS avg_resolution_time_hours
    FROM public.project_sample

    WHERE inc_resolved_at > inc_sys_created_on
    GROUP BY inc_category, inc_priority;
------------------------------------------------------------------------------------------------------------------------

3)Calculate ticket closure rate per Assigned Group

 WITH closure_data AS (
    SELECT 
        inc_assignment_group,
        count(inc_number) AS total_tickets,
        count(CASE WHEN inc_state = 'Closed' THEN 1 END) AS closed_tickets
    FROM public.project_sample

    GROUP BY inc_assignment_group
)
SELECT 
    inc_assignment_group,
    total_tickets,
    closed_tickets,
    (cast(closed_tickets as float)/cast(total_tickets as FLOAT))  * 100 AS closure_rate_percentage
FROM closure_data;

--------------------------------------------------------------------------------------------------------------------------
4) Create a Monthly Ticket Summary table aggregating the number of tickets, average resolution time, and closure rate per month.

Dag-

from airflow import DAG
from airflow.operators.python import PythonOperator
import os,sys
from airflow.utils.dates import days_ago
from datetime import datetime,date,timedelta
import pandas as pd
from airflow.models import Variable
from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.exceptions import AirflowSkipException
from Utilities.monthly_ticket_summary import check_temp_table_fn,get_record_count_temp_table_fn
from Utilities.msteams_callbacks import teams_failed_notifications
from airflow.operators.dummy_operator import DummyOperator

dag_name = "load_pgr_public_t_monthly_ticket_summary"
postgres_conn_id = "abc"
upload_postgres_conn_id = "abca"
postgres_hook = PostgresHook(postgres_conn_id)
upload_postgres_hook = PostgresHook(upload_postgres_conn_id)


   
default_args = {
    'owner': 'project_sample',
    'depends_on_past': False,
    'start_date': '2024-02-27',
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0
}

dag = DAG(
    dag_id=dag_name,
    default_args=default_args,
    catchup=False,
    access_control={'de_jfi_afi': {'can_dag_read', 'can_dag_edit'},
                'da_jfi_afi': {'can_dag_read'}
                },
    max_active_runs=1,
    schedule_interval= None,
    description= "Loads csv data into monthly ticket summary"
)

start_load_task = DummyOperator(task_id="start_load", dag=dag)
####################### monthly ticket summary ############################

check_monthly_ticket_summary_logs_temp_table = PythonOperator(
    task_id='check_monthly_ticket_summary_logs_temp_table',
    python_callable=check_temp_table_fn,
    op_kwargs={'postgres_hook':upload_postgres_hook,'source_dataset':'public','temp_table':'public.project_sample'},
    dag=dag
)

get_record_count_monthly_ticket_summary_logs_temp_table = PythonOperator(
    task_id='get_record_count_monthly_ticket_summary_logs_temp_table',
    python_callable=get_record_count_temp_table_fn,
    op_kwargs={'postgres_hook':upload_postgres_hook,'source_dataset':'public','temp_table':'public.project_sample'},
    dag=dag,
)


def routine_jioevents_projected_aop_logs_fn(**kwargs):
    ti = kwargs['ti']
    flag = ti.xcom_pull(task_ids="check_monthly_ticket_summary_logs_temp_table")

    if flag == True:
        call_proc = """CALL monthly_ticket_summary_p001; """
        connection = postgres_hook.get_conn()
        cursor = connection.cursor()
        cursor.execute(call_proc)
        connection.commit()    

        # Close the cursor and connection
        cursor.close()
        connection.close()
        
    else:
        raise AirflowSkipException
    

routine_monthly_ticket_summary_logs = PythonOperator(
    task_id='routine_monthly_ticket_summary_logs_task',
    python_callable=routine_monthly_ticket_summary_logs_fn,
    dag=dag
)
    

drop_monthly_ticket_summary_logs_temp_table = PostgresOperator(
    task_id='drop_monthly_ticket_summary_logs_temp_table',
    postgres_conn_id=upload_postgres_conn_id,  
    sql="DROP TABLE public.public.project_sample; ", 
    dag=dag,
)


########################################################################################


start_load_task >> check_monthly_ticket_summary_logs_temp_table >> get_record_count_monthly_ticket_summary_logs_temp_table >> routine_monthly_ticket_summary_logs >> drop_monthly_ticket_summary_logs_temp_table



--------------------------------------------------------------------------------------

Procedure -

CREATE OR REPLACE PROCEDURE monthly_ticket_summary_p001()
LANGUAGE plpgsql
AS $$
BEGIN
    -- Insert monthly aggregated data into a summary table
    INSERT INTO monthly_ticket_summary (
        created_year, created_month, total_tickets, avg_resolution_time_hours, closure_rate_percentage
    )
    SELECT 
        EXTRACT(YEAR FROM inc_sys_created_on) AS created_year,
        EXTRACT(MONTH FROM inc_sys_created_on) AS created_month,
        COUNT(inc_number) AS total_tickets,
        AVG(EXTRACT(EPOCH FROM (inc_resolved_at - inc_sys_created_on))::FLOAT) / 3600 AS avg_resolution_time_hours,
        COUNT(CASE WHEN inc_state = 'Closed' THEN 1 END) * 100.0 / NULLIF(COUNT(inc_number), 0) AS closure_rate_percentage
    FROM public.project_sample
    GROUP BY created_year, created_month;
    
    -- Optional: Raise a notice for successful execution
    RAISE NOTICE 'Monthly summary updated successfully!';
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error in procedure: %', SQLERRM;
END;
$$;

------------------------------------------------------------------------------------------------------------
Table -

create or replace table monthly_ticket_summary (
    created_year INT,
    created_month INT,
    total_tickets INT,
    avg_resolution_time_hours FLOAT,
    closure_rate_percentage FLOAT
);